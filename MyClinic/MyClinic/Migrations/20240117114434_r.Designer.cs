// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyClinic.Data;

#nullable disable

namespace MyClinic.Migrations
{
    [DbContext(typeof(MyClinicContext))]
    [Migration("20240117114434_r")]
    partial class r
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyClinic.Models.Assistant", b =>
                {
                    b.Property<int>("AssistantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssistantID"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstMidName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstMidName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssistantID");

                    b.ToTable("Assistant", (string)null);
                });

            modelBuilder.Entity("MyClinic.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PatientID");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("MyClinic.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int?>("paymentStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("PatientID");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("MyClinic.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentID");

                    b.HasIndex("PaymentID");

                    b.ToTable("Treatment", (string)null);
                });

            modelBuilder.Entity("MyClinic.Models.Treatmentpatient", b =>
                {
                    b.Property<int>("TreatmentpatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentpatientID"), 1L, 1);

                    b.Property<int?>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Service")
                        .HasColumnType("int");

                    b.HasKey("TreatmentpatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("Treatmentpatient", (string)null);
                });

            modelBuilder.Entity("MyClinic.Models.Payment", b =>
                {
                    b.HasOne("MyClinic.Models.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientID");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MyClinic.Models.Treatment", b =>
                {
                    b.HasOne("MyClinic.Models.Payment", null)
                        .WithMany("Treatments")
                        .HasForeignKey("PaymentID");
                });

            modelBuilder.Entity("MyClinic.Models.Treatmentpatient", b =>
                {
                    b.HasOne("MyClinic.Models.Patient", "Patient")
                        .WithMany("Treatmentpatients")
                        .HasForeignKey("PatientID");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MyClinic.Models.Patient", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Treatmentpatients");
                });

            modelBuilder.Entity("MyClinic.Models.Payment", b =>
                {
                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
